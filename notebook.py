# -*- coding: utf-8 -*-
"""Proyek_Analisis_Solusi_Performa_Mahasiswa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16TEk-lo9tNDvWtl8YxXjDhn3dE4pXHyg

# Proyek Analisis : Solusi Performa Mahasiswa
- **Nama:** Abid Juliant Indraswara
- **Email:** abidjuliant@gmail.com
- **ID Dicoding:** abidindraswara

## Project Overview

Proyek dibuat berdasarkan latar belakang masalah yang dialami oleh Jaya Jaya Institut. Proyek ini akan dibagi ke dalam beberapa bagian dari mulai Business Understanding, Data Understanding, Data Preparation, Modeling, Evaluation, Deployment dan Conclusion. Permasalahan yang dialami Jaya Jaya Institut berkaitan dengan performa siswa yang diuraikan pada siswa yang dropout. Performa siswa sangat berpengaruh pada siswa lainnya dan begitu juga penilaian orang tua beserta masyarakat umum terhadap sekolah. Sekolah berusaha dengan berbagai upaya untuk dapat menekan dan mengurangi siswa yang dropout begitu juga peningkatan siswa untuk menciptakan sekolah yang kondusif serta mampu mencipatkan siswa berprestasi. Umumnya siswa yang dropout berkaitan dengan performa masing-masing siswa yang diduga oleh berbagai faktor baik internal maupun eksternal. Proyek ini berusaha untuk menganalisis dan melihat peluang solusi dari permasalahan Jaya Jaya Institut. Menggunakan analisis data, visualisasi dan sistem berbasis machine learning untuk dapat menemukan jawaban secara efektif dan efisien.

## Business Understanding

### Latar Belakang :

Jaya Jaya Institut merupakan salah satu institusi pendidikan perguruan yang telah berdiri sejak tahun 2000. Hingga saat ini ia telah mencetak banyak lulusan dengan reputasi yang sangat baik. Akan tetapi, terdapat banyak juga mahasiswa yang tidak menyelesaikan pendidikannya alias dropout.

Jumlah dropout yang tinggi ini tentunya menjadi salah satu masalah yang besar untuk sebuah institusi pendidikan. Oleh karena itu, Jaya Jaya Institut ingin mendeteksi secepat mungkin mahasiswa yang mungkin akan melakukan dropout sehingga dapat diberi bimbingan khusus.

Melalui permasalahan diatas, sebagai seorang data scientist berupaya untuk mengidentifikasi berbagai faktor yang mempengaruhi banyaknya mahasiswa yang dropout. Selain identifikasi, tahapan analisis melalui visual dan juga membuat sistem machine learning untuk dapat menklasifikan mahamahasiswa yang droup kemudian ditampilkan dalam sebuah dashboard untuk memonitor berbagai faktor.

### Problem Description :    

Terdapat beberapa hal yang bisa diambil dari latar belakang diatas khususnya bagian permasalahan utama adalah banyaknya mahasiswa yang dropout. Melalui permasalahan utama tersebut dapat dibagi ke dalam beberapa bagian kecil untuk nantinya di analisis dalam menemukan jawaban atau kesimpulan yang mampu memberikan solusi dari permasalahan Jaya Jaya Institut. Penyebab banyak mahasiswa dropout bisa didukung oleh beberapa kemungkinan diantaranya

Main Problem : Banyaknya mahasiswa Dropout Sejak Jaya Jaya Institut Didirikan

- Latar belakang keluarga yang berbeda masing-masing mahasiswa
- Status pernikahan mahasiswa
- Nilai studi ujian performa mahasiswa
- Bidang atau Jurusan mahasiswa
- Waktu kehadiran kelas mahasiswa
- Jenis aplikasi mahasiswa ke sekolah

Sebelum ke tahapan pemahaman data perlu disusun beberapa problem statement untuk menentukan permasalahan dengan lebih jelas. Pertanyaan tersebut disusun untuk dapat menjawab solusi melalui insight data.

### Problem Statement

Berikut beberapa pertanyaan yang disusun untuk dijadikan acuan dalam menggali insight data nantinya untuk mencari jawaban serta solusi yang dibutuhkan :
- Bagaimana perbandingan mahasiswa yang lulus dan dropout?
- Bagaimana persebaran data mahasiswa yang dropout berdasarkan status pernikahan?
- Bagaimana perbandingan mahasiswa dropout berdasarkan gender?
- Bagaimana perbandingan data Umur mahasiswa pada saat pendaftaran ke Jaya Jaya Institut?
- Apa pengaruh bidang atau jurusan mahasiswa terhadap mahasiswa dropout dan lulus?
- Bagaimana persebaran mahasiswa International pada masing-masing Jurusan?
- Bagaimana pengaruh waktu kehadiran mahasiswa terhadap mahasiswa yang dropout?
- Bagaimana pengaruh kewarganegaraan mahasiswa dapat berpengaruh terhadap mahasiswa dropout?
- Apakah ada pengaruh Educational Special Needs terhadap performa mahasiswa dropout?
- Apakah ada pengaruh mahasiswa yang Debtor terhadap performa mahasiswa?
- Apakah ada pengaruh penerima beassiswa terhadap Status mahasiswa dropout atau lulus?
- Bagaimana korelasi Status mahasiswa dengan fitur yang lainnya?

### Goals

Tujuan dari pembuatan proyek ini adalah sebagai berikut
- Mendapatkan insight melalui hubungan performa mahasiswa dengan beberapa paramater atau variabel yang ada pada data Jaya Jaya Institut.
- Membuat dashboard untuk dapat dianalisis secara visual disesuaikan dengan kebutuhan Jaya Jaya Institut untuk dapat memantau dan menganalisis performa mahasiswa.
- Menemukan jawaban serta memberikan solusi kepada Jaya Jaya Institut terkait permasalahan performa mahasiswa.
- Membuat sistem berbasis machine learning untuk menklasifikasikan mahasiswa yang memiliki potensi dropout tinggi dengan mahasiswa yang tidak.

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

!pip install pandas sqlalchemy

# Import Library Umum
import os, shutil
from shutil import copyfile
import zipfile
import pathlib
from pathlib import Path
import numpy as np
import pandas as pd
from collections import Counter
from google.colab import files
from sqlalchemy import create_engine

# Commented out IPython magic to ensure Python compatibility.
# Import Library Visualisasi
# %matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.image import imread
import plotly.express as pxp
import seaborn as sns

# Import Library Preprocessing dan Machine Learning
import tensorflow as tf
import pickle
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder, MinMaxScaler
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.metrics import confusion_matrix,classification_report, accuracy_score, roc_curve, auc
from sklearn.model_selection import train_test_split, cross_val_score
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline as ImbPipeline
from sklearn.neighbors import KNeighborsClassifier # KNN
from sklearn.svm import SVC # SVM
from sklearn.tree import DecisionTreeClassifier # Decision Tree
from sklearn.ensemble import RandomForestClassifier # Random Forest
from xgboost import XGBClassifier # XGBoost

print("Numpy version:", np.__version__)
print("Pandas version:", pd.__version__)
print("Matplotlib version:", matplotlib.__version__)
print("Seaborn version:", sns.__version__)

"""### Menyiapkan data yang akan digunakan

#### Data Loading
"""

# Koneksi ke Google Drive untuk import dataset
from google.colab import drive
drive.mount('/content/drive')

# Cek Folder
!ls '/content/drive/My Drive/Dataset_MachineLearning/Dataset_Dicoding_Studi_Kasus_Performa_Mahasiswa/'

# Dataset Mahasiswa Jaya Jaya Institut
students_df = pd.read_csv("/content/drive/My Drive/Dataset_MachineLearning/Dataset_Dicoding_Studi_Kasus_Performa_Mahasiswa/students_data.csv", delimiter=";")
students_df.head()

students_df

"""## Data Understanding

Dataset yang digunakan pada proyek ini disediakan oleh Dicoding sebagai studi kasus yang perlu di analisis. Dataset yang digunakan merupakan data dummy yang disediakan oleh tim Dicoding melalui sumber berikut [acknowledgement](https://doi.org/10.24432/C5MC89) dan skenario yang digunakan bersifat fiktif. Merupakan dataset mahasiswa terdiri sekitar 37 kolom yang berisi 4425 baris data. Data terdiri dari bagian institusi pendidikan tinggi diantaranya detail demografi, metrik yang memiliki relasi mahasiswa dan flag status dibagi sebagai berikut :    
- Marital_status                              
- Application_mode                            
- Application_order                           
- Course                                      
- Daytime_evening_attendance                  
- Previous_qualification                      
- Previous_qualification_grade                
- Nacionality                                 
- Mothers_qualification                       
- Fathers_qualification                       
- Mothers_occupation                          
- Fathers_occupation                          
- Admission_grade                             
- Displaced                                   
- Educational_special_needs                   
- Debtor                                      
- Tuition_fees_up_to_date                     
- Gender                                      
- Scholarship_holder                          
- Age_at_enrollment                           
- International                               
- Curricular_units_1st_sem_credited           
- Curricular_units_1st_sem_enrolled           
- Curricular_units_1st_sem_evaluations        
- Curricular_units_1st_sem_approved           
- Curricular_units_1st_sem_grade              
- Curricular_units_1st_sem_without_evaluations
- Curricular_units_2nd_sem_credited           
- Curricular_units_2nd_sem_enrolled           
- Curricular_units_2nd_sem_evaluations        
- Curricular_units_2nd_sem_approved           
- Curricular_units_2nd_sem_grade              
- Curricular_units_2nd_sem_without_evaluations
- Unemployment_rate                           
- Inflation_rate                              
- GDP                                         
- Status                                      

Untuk memahami lebih dalam mengenai permasalahan HR ini perlu di susun konsep tahapan memahami dataset karyawan yaitu Exploratory Data Analysis - Deskripsi Variabel yang terdiri dari beberapa bagian
1. Dataset Info
2. Dataset Describe
3. Dataset Check NULL
4. Dataset Check NaN
5. Dataset Duplicate
6. Dataset Check Unique

### Exploratory Data Analysis - Deskripsi Variabel

Eksplorasi data untuk mengetahui info mengenai dataset beserta variabelnya. Tahapan ini juga mengecek nilai null atau NaN, persebaran data, duplikat dan outlier dari data.

#### Dataset Info
"""

# Cek Info Kolom Dataset
print('Informasi Dataset Mahasiswa Jaya Jaya Institut')
print(students_df.info())

"""Dataset terdiri daru 37 kolom dengan jumlah 4424 data. Nilai NULL ataupun NaN tidak muncul pada dataset sehingga bisa lanjut ke tahap selanjutnya.

#### Dataset Describe
"""

# Cek Deskripsi Dataset secara Horizontal
print('Deskripsi Dataset Mahasiswa Jaya Jaya Institut')
students_df.describe().T

"""Fokus pada describe untuk mengetahui jumlah data, nilai rata-rata, standar deviasi, minimum, maksimum dan nilai kuartal pada parameter numerik. Secara keseluruhan kolom mengandung nilai numerik kecuali kolom Status.

#### Dataset Check NULL
"""

# Cek Null Dataset
print('Cek Null Dataset Mahasiswa Jaya Jaya Institut')
print(students_df.isnull().sum())

"""Nilai NULL tidak muncul pada semua kolom dataset. Sehingga tidak perlu dilakukan penghilangan ata NULL ataupun pengisian nilai NULL.

#### Dataset Check NaN
"""

# Cek NaN Dataset
print('Cek NaN  Dataset Mahasiswa Jaya Jaya Institut')
print(students_df.isna().sum())

"""Sama halnya nilai NULL, nilai NaN tidak muncul pada semua kolom dataset. Sehingga tidak perlu dilakukan penghilangan ata NaN ataupun pengisian nilai NaN.

#### Dataset Check Duplicate
"""

# Cek Duplikat Data pada  Dataset Mahasiswa Jaya Jaya Institut
print('Cek Duplikat Data pada  Dataset Mahasiswa Jaya Jaya Institut : ', students_df.duplicated().sum())

"""Duplikat data tidak ada pada dataset ini sehingga bisa lanjut ke tahap pengecekan berikutnya.

#### Dataset Check Unique
"""

# Cek Data Unik Dataset Mahasiswa Jaya Jaya Institut Masing-Masing Parameter
print('Cek Data Unik  Dataset Mahasiswa Jaya Jaya Institut Masing-Masing Parameter')
print(students_df.nunique())

# Cek Kategori di Masing-Masing Parameter atau Kolom  Dataset Mahasiswa Jaya Jaya Institut
# Cek Kategori untuk Kolom dengan Tipe Data object
category_per_columns = students_df.select_dtypes(include=['object']).columns

# Cek per Parameter atau kolom
for column in category_per_columns:
    category_value = students_df[column].unique()
    print(f"{column}: \n{category_value}", '\n')

"""Kolom kategori hanya ada pada kolom Status saja, sisanya bernilai numerik. Namun melalui informasi data unique terlihat bahwa beberapa kolom memiliki nilai numerik yang tidak sampai di atas ratusan sehingga terdapat kemungkinan bahwa kolom tersebut bersifat kategorik dengan tipe data numerik. Pada tahapan analisis perlu dilakukan tahapan data preprocessing terlebih dahulu untuk mengubah nilai numerik menjadi nilai kategorik dengn informasi yang dapat dibaca.

## Data Preparation

Ada beberapa tahapan yang perlu dilakukan sebelum masuk ke bagian EDA - Based on Question, paling tidak terdapat dua proses terpisah yang perlu dilakukan diantaranya

1. Data Preparation - Analisis

   Pada tahapan ini berfokus pada mengubah nilai numerik yang bersifat kategorik ke bentuk tipe data object. Informasi kolom kategorik ini di dapatkan melalui deskripsi dataset nya pada [Dataset](https://github.com/dicodingacademy/dicoding_dataset/tree/main/students_performance). Kegunaannya agar informasi yang nantinya diproses pada tahap analisis dapat terbaca dengan baik serta mendapatkan informasi yang seusai. Kolom tersebut diantaranya
   - Marital Status
   - Application Mode
   - Course
   - Daytime/Evening Attendance
   - Previous Qualification
   - Nacionality
   - Mother's Qualification
   - Father's Qualification
   - Mother's Occupation
   - Father's Occupation
   - Displaced
   - Educational Special Needs
   - Debtor
   - Tuition Fees Up to Date
   - Gender
   - Scholarship Holder
   - International

2. Data Preparation - Modeling

   Tahapan Data Preparation untuk Modeling sedikit berbeda dengan proses analisis karena fokusnya adalah membuat model machine learning. Tahapannya dibagi kedalam beberapa bagian yaitu
   - Encoding Fitur
   - Fitur Seleksi
   - Train Test Split
   - Standardisasi.

### Data Preparation - Analysis
"""

# Cek Dataset Mahasiswa Jaya Jaya Institut
students_df.head()

# Assign Data ke variabel dataset analisis menggunakan copy
analisis_students_df = students_df.copy()

# Cek Info Dataset Analisis
analisis_students_df.info()

"""Dataset analisis akan digunakan untuk melakukan EDA berdasarkan pertanyaan yang sudah dibuat diawal. Visual akan dibuatkan berdasarkan parameter-parameter yang berhubungan. Melalui pola visual tersebut diharapkan dapat insight serta kesimpulan yang sesuai dari problem yang dialami Jaya Jaya Institut.

#### Penamaan Kategori pada Kolom Numerik sesuai Deskripsi Dataset

 Penamaan kategori disesuaikan sebagai berikut

- Marital Status
- Application Mode
- Course
- Daytime/Evening Attendance
- Previous Qualification
- Nacionality
- Mother's Qualification
- Father's Qualification
- Mother's Occupation
- Father's Occupation
- Displaced
- Educational Special Needs
- Debtor
- Tuition Fees Up to Date
- Gender
- Scholarship Holder
- International

##### Mapping Kategori

Beberapa kolom kategorinya sangat panjang sehingga di mamping tersendiri.
"""

# Mapping kategori Application Mode
application_mode_map = {
    1: '1st phase - general contingent',
    2: 'Ordinance No. 612/93',
    5: '1st phase - special contingent (Azores Island)',
    7: 'Holders of other higher courses',
    10: 'Ordinance No. 854-B/99',
    15: 'International student (bachelor)',
    16: '1st phase - special contingent (Madeira Island)',
    17: '2nd phase - general contingent',
    18: '3rd phase - general contingent',
    26: 'Ordinance No. 533-A/99, item b2) (Different Plan)',
    27: 'Ordinance No. 533-A/99, item b3 (Other Institution)',
    39: 'Over 23 years old',
    42: 'Transfer',
    43: 'Change of course',
    44: 'Technological specialization diploma holders',
    51: 'Change of institution/course',
    53: 'Short cycle diploma holders',
    57: 'Change of institution/course (International)'
}

# Mapping kategori Course
course_map = {
    33: 'Biofuel Production Technologies',
    171: 'Animation and Multimedia Design',
    8014: 'Social Service (evening attendance)',
    9003: 'Agronomy',
    9070: 'Communication Design',
    9085: 'Veterinary Nursing',
    9119: 'Informatics Engineering',
    9130: 'Equinculture',
    9147: 'Management',
    9238: 'Social Service',
    9254: 'Tourism',
    9500: 'Nursing',
    9556: 'Oral Hygiene',
    9670: 'Advertising and Marketing Management',
    9773: 'Journalism and Communication',
    9853: 'Basic Education',
    9991: 'Management (evening attendance)'
}

# Mapping kategori Previous Qualification dari Mahasiswa
previous_qualification_map = {
    1: 'Secondary education',
    2: "Higher education - bachelor's degree",
    3: 'Higher education - degree',
    4: "Higher education - master's",
    5: 'Higher education - doctorate',
    6: 'Frequency of higher education',
    9: '12th year of schooling - not completed',
    10: '11th year of schooling - not completed',
    12: 'Other - 11th year of schooling',
    14: '10th year of schooling',
    15: '10th year of schooling - not completed',
    19: 'Basic education 3rd cycle (9th/10th/11th year) or equiv.',
    38: 'Basic education 2nd cycle (6th/7th/8th year) or equiv.',
    39: 'Technological specialization course',
    40: 'Higher education - degree (1st cycle)',
    42: 'Professional higher technical course',
    43: 'Higher education - master (2nd cycle)',
}

# Mapping kategori Nacionality
nacionality_map = {
    1: 'Portuguese',
    2: 'German',
    6: 'Spanish',
    11: 'Italian',
    13: 'Dutch',
    14: 'English',
    17 : 'Lithuanian',
    21 : 'Angolan',
    22 : 'Cape Verdean',
    24 : 'Guinean',
    25 : 'Mozambican',
    26 : 'Santomean',
    32 : 'Turkish',
    41 : 'Brazilian',
    62 : 'Romanian',
    100 : 'Moldova (Republic of)',
    101 : 'Mexican',
    103 : 'Ukrainian',
    105 : 'Russian',
    108 : 'Cuban',
    109 : 'Colombian'
}

# Mapping kategori Qualification untuk Ibu dan Ayah dari Mahasiswa
qualification_map = {
    1: 'Secondary Education - 12th Year of Schooling or Eq.',
    2: "Higher Education - Bachelor's Degree",
    3: 'Higher Education - Degree',
    4: "Higher Education - Master's",
    5: 'Higher Education - Doctorate',
    6: 'Frequency of Higher Education',
    9: '12th Year of Schooling - Not Completed',
    10: '11th Year of Schooling - Not Completed',
    11: '7th Year (Old)',
    12: 'Other - 11th Year of Schooling',
    13: '2nd year complementary high school course',
    14: '10th Year of Schooling',
    18: 'General commerce course',
    19: 'Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv.',
    20: 'Complementary High School Course',
    22: 'Technical-professional course',
    25: 'Complementary High School Course - not concluded',
    26: '7th year of schooling',
    27: '2nd cycle of the general high school course',
    29: '9th Year of Schooling - Not Completed',
    30: '8th year of schooling',
    31: 'General Course of Administration and Commerce',
    33: 'Supplementary Accounting and Administration',
    34: 'Unknown',
    35: "Can't read or write",
    36: 'Can read without having a 4th year of schooling',
    37: 'Basic education 1st cycle (4th/5th year) or equiv.',
    38: 'Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv.',
    39: 'Technological specialization course',
    40: 'Higher education - degree (1st cycle)',
    41: 'Specialized higher studies course',
    42: 'Professional higher technical course',
    43: 'Higher Education - Master (2nd cycle)',
    44: 'Higher Education - Doctorate (3rd cycle)'
}

# Mapping kategori Occupation untuk Ibu dan Ayah dari Mahasiswa
occupation_map = {
    0: 'Student',
    1: 'Representatives of the Legislative Power and Executive Bodies, Directors, Directors, and Executive Managers',
    2: 'Specialists in Intellectual and Scientific Activities',
    3: 'Intermediate Level Technicians and Professions',
    4: 'Administrative staff',
    5: 'Personal Services, Security and Safety Workers, and Sellers',
    6: 'Farmers and Skilled Workers in Agriculture, Fisheries, and Forestry',
    7: 'Skilled Workers in Industry, Construction, and Craftsmen',
    8: 'Installation and Machine Operators and Assembly Workers',
    9: 'Unskilled Workers',
    10: 'Armed Forces Professions',
    90: 'Other Situation',
    99: 'Blank',
    101: 'Armed Forces Officers',
    102: 'Armed Forces Sergeants',
    103: 'Other Armed Forces personnel',
    112: 'Directors of administrative and commercial services',
    114: 'Hotel, catering, trade and other services directors',
    121: 'Specialists in the physical sciences, mathematics, engineering, and related techniques',
    122: 'Health professionals',
    123: 'Teachers',
    124: 'Specialists in finance, accounting, administrative organization, public and commercial relations',
    125: 'Specialists in information and communication technologies (ICT)',
    131: 'Intermediate level science and engineering technicians and professions',
    132: 'Technicians and professionals, of intermediate level of health',
    134: 'Intermediate level technicians from legal, social, sports, cultural and similar services',
    135: 'Information and communication technology technicians',
    141: 'Office workers, secretaries in general and data processing operators',
    143: 'Data, accounting, statistical, financial services and registry-related operators',
    144: 'Other administrative support staff',
    151: 'Personal service workers',
    152: 'Sellers',
    153: 'Personal care workers and the like',
    154: 'Protection and security services personnel',
    161: 'Market-oriented farmers and skilled agricultural and animal production workers',
    163: 'Farmers, livestock keepers, fishermen, hunters and gatherers, subsistence',
    171: 'Skilled construction workers and the like, except electricians',
    172: 'Skilled workers in metallurgy, metalworking and similar',
    173: 'Skilled workers in printing, precision instrument manufacturing, jewelers, artisans and the like',
    174: 'Skilled workers in electricity and electronics',
    175: 'Workers in food processing, woodworking, clothing and other industries and crafts',
    181: 'Fixed plant and machine operators',
    182: 'Assembly workers',
    183: 'Vehicle drivers and mobile equipment operators',
    191: 'cleaning workers',
    192: 'Unskilled workers in agriculture, animal production, fisheries, and forestry',
    193: 'Unskilled workers in extractive industry, construction, manufacturing and transport',
    194: 'Meal preparation assistants',
    195: 'Street vendors (except food) and street service providers'
}

"""##### Update Penamaan Deskripsi pada Kolom Kategori

Menggunakan fungsi replcae untuk mengubah deskripsi angka/numerik menjadi deskripsi pada kolok kategori.
"""

# Kolom Maritas Status
analisis_students_df['Marital_status'] = analisis_students_df['Marital_status'].replace({
    1: 'single',
    2: 'married',
    3: 'widower',
    4: 'divorced',
    5: 'facto union',
    6: 'legally separated'
})

# Kolom Application Mode
analisis_students_df['Application_mode'] = analisis_students_df['Application_mode'].map(application_mode_map)

# Kolom Course
analisis_students_df['Course'] = analisis_students_df['Course'].map(course_map)

# Kolom Daytime/Evening Attendance
analisis_students_df['Daytime_evening_attendance'] = analisis_students_df['Daytime_evening_attendance'].replace({
    1: 'daytime',
    0: 'evening'
})

# Kolom Previous Qualification
analisis_students_df['Previous_qualification'] = analisis_students_df['Previous_qualification'].map(previous_qualification_map)

# Kolom Nacionality
analisis_students_df['Nacionality'] = analisis_students_df['Nacionality'].map(nacionality_map)

# Kolom Mother's Qualification
analisis_students_df['Mothers_qualification'] = analisis_students_df['Mothers_qualification'].map(qualification_map)

# Kolom Father's Qualification
analisis_students_df['Fathers_qualification'] = analisis_students_df['Fathers_qualification'].map(qualification_map)

# Kolom Mother's Occupation
analisis_students_df['Mothers_occupation'] = analisis_students_df['Mothers_occupation'].map(occupation_map)

# Kolom Father's Occupation
analisis_students_df['Fathers_occupation'] = analisis_students_df['Fathers_occupation'].map(occupation_map)

# Kolom Displaced
analisis_students_df['Displaced'] = analisis_students_df['Displaced'].replace({
    1: 'yes',
    0: 'no'
})

# Kolom Educational Sepcial Needs
analisis_students_df['Educational_special_needs'] = analisis_students_df['Educational_special_needs'].replace({
    1: 'yes',
    0: 'no'
})

# Kolom Debtor
analisis_students_df['Debtor'] = analisis_students_df['Debtor'].replace({
    1: 'yes',
    0: 'no'
})

# Kolom Tuition Fees Up to Date
analisis_students_df['Tuition_fees_up_to_date'] = analisis_students_df['Tuition_fees_up_to_date'].replace({
    1: 'yes',
    0: 'no'
})

# Kolom Gender
analisis_students_df['Gender'] = analisis_students_df['Gender'].replace({
    1: 'male',
    0: 'female'
})

# Kolom Scholarship Holder
analisis_students_df['Scholarship_holder'] = analisis_students_df['Scholarship_holder'].replace({
    1: 'yes',
    0: 'no'
})

# Kolom International
analisis_students_df['International'] = analisis_students_df['International'].replace({
    1: 'yes',
    0: 'no'
})

# Cek Info Dataset Analisis
analisis_students_df.info()

# Cek Dataset 5 data
analisis_students_df.head()

# Cek Kategori untuk Kolom dengan Tipe Data object
category_per_columns = analisis_students_df.select_dtypes(include=['object']).columns

# Cek list fitur kategori
print(category_per_columns)

# Cek per Parameter atau kolom
for column in category_per_columns:
    category_value = analisis_students_df[column].unique()
    print(f"{column}: \n{category_value}", '\n')

"""Sudah terdapat 18 kolom kategori yang ditambahkan atas kolom Marital_status, Application_mode, Course, Daytime_evening_attendance, Previous_qualification, Nacionality, Mothers_qualification, Fathers_qualification, Mothers_occupation, Fathers_occupation, Displaced, Educational_special_needs, Debtor, Tuition_fees_up_to_date, Gender, Scholarship_holder dan Internationale.

#### Convert Dataset Analisis to CSV File
"""

# Convert dataset to csv file
analisis_students_df.to_csv("analisis_students.csv", index=False)

files.download('analisis_students.csv')

"""#### Upload Dataset Analisis ke Supabase"""

URL = "postgresql://postgres.dcnlqnqewyfjspsypzag:DicodingStudents^2024@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres"

engine = create_engine(URL)
analisis_students_df.to_sql('students', engine)

"""### Data Preparation - Modeling

Sebelum mngolah data preprocessing pada bagian status terdapat kategori Enrolled yang berarti mahasiswa tersebut masih dalam status kuliah. Sedangkan fokus dari data modeling adalah menetukan kelas atau klasifikasi mahasiswa yang berpotensi lulus dengan yang dropout. Oleh karena itu perlu dilakukan pemisahan data yang berstatus Enrolled dengan yang tidak. Data yang memiliki Status Enrolled dapat digunakan untuk data prediksi.
"""

# Menyiapkan Variabel Data Prep untuk Modeling
dataprep_model_df = students_df.copy()

# Cek Info Datase
dataprep_model_df.info()

"""##### Split Data dengan Status 'Enrolled' dan bukan Status 'Enrolled'"""

# Memisahkan data berdasarkan Status pada kolom 'Status'
status_enroll_df = dataprep_model_df[dataprep_model_df['Status'] == 'Enrolled'].copy()  # Data yang memiliki Enrolled pada kolom Status
status_not_enroll_df = dataprep_model_df[dataprep_model_df['Status'] != 'Enrolled'].copy()  # Data yang tidak memiliki Enrolled pada kolom Status

# Menampilkan jumlah baris untuk masing-masing dataset
print(f'Jumlah data dengan Enrolled pada kolom Status: ')
print(status_enroll_df['Status'].value_counts())
print(f'\nJumlah data tanpa Enrolled pada kolom Status: ')
print(status_not_enroll_df['Status'].value_counts())

"""###### Convert Data Status Enrolled
 Covert data untuk digunakan sebagai data prediksi.
"""

data_for_predict_df = status_enroll_df.copy()

# Convert dataset to csv file
data_for_predict_df.to_csv("data_predict_students.csv", index=False)

files.download('data_predict_students.csv')

"""#### Encoding Fitur Kategori

Dataset yang digunakan untuk mengolah modeling data dataset yang belum dilakukan preprocessing atau belum update deskripsi kolom kategori. Hal ini karena dataset tersbut datanya masih asli dan sebagian besar kolom bersifat numerik hanya satu kolom yang kategori bertipe object. Sehingga data yang akan dilakukan encoding adalah kolom Status saja.


"""

# Assign Variabel Dataprep Model menggunakan Data dengan status selain Enrolled
dataprep_model_df = status_not_enroll_df.copy()

print(dataprep_model_df['Status'].value_counts())

# Inisialisasi LabelEncoder
label_encoder = LabelEncoder()

# Mengonversi kolom 'Status' menjadi label numerik
dataprep_model_df['Status'] = label_encoder.fit_transform(dataprep_model_df['Status'])

# Tampilkan hasil label encoding
dataprep_model_df[['Status']]

dataprep_model_df.info()

"""#### Seleksi Fitur"""

# Variabel Data [X]
# Memilih kolom-kolom data
X = dataprep_model_df.drop('Status', axis=1)
X.head()

# Variabel Data [y]
# Memilih kolom label Target
y = dataprep_model_df['Status']
y.head()

"""#### Train_Test_Split Dataset
Tahapan ini dilakukan untuk membagi data yang akan dibutuhkan untuk modeling dan data yang dibutuhkan untuk testing.
"""

# Train Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

# Cek Hasil Split Data
print(f'Total Jumlah Data          : {len(X)}')
print(f'Total Jumlah Data Training : {len(X_train)}')
print(f'Total Jumlah Data Testing  : {len(X_test)}')

"""#### Standardisasi

Dilakukan untuk menyeterakan nilai yang sama pada setiap kolom numerik dengan rentang 0 hingga 1. Sehingga sistem komputer akan mudah melakukan pembacaan dan training model.
"""

# Standardisasi Nilai Numerik
numerical_features = X.select_dtypes(include=['int64', 'float64', 'bool']).columns.tolist()

scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

# Cek dan Pastikan sudah Standardisasi
X_train[numerical_features].describe().round(4)

"""## Exploratory Data Analysis - Based on Questions

Pertanyaan yang diajukan merujuk pada permasalahan Jaya Jaya Institut
- Bagaimana perbandingan mahasiswa yang lulus dan dropout?
- Bagaimana persebaran data mahasiswa yang dropout berdasarkan status pernikahan?
- Bagaimana perbandingan mahasiswa dropout berdasarkan gender?
- Bagaimana perbandingan data Umur mahasiswa pada saat pendaftaran ke Jaya Jaya Institut?
- Apa pengaruh bidang atau jurusan mahasiswa terhadap mahasiswa dropout dan lulus?
- Bagaimana persebaran mahasiswa International pada masing-masing Jurusan?
- Bagaimana pengaruh waktu kehadiran mahasiswa terhadap mahasiswa yang dropout?
- Bagaimana pengaruh kewarganegaraan mahasiswa dapat berpengaruh terhadap mahasiswa dropout?
- Apakah ada pengaruh Educational Special Needs terhadap performa mahasiswa dropout?
- Apakah ada pengaruh mahasiswa yang Debtor terhadap performa mahasiswa?
- Apakah ada pengaruh penerima beassiswa terhadap Status mahasiswa dropout atau lulus?
- Bagaimana korelasi Status mahasiswa dengan fitur yang lainnya?

### Bagaimana perbandingan mahasiswa yang lulus dan dropout?
"""

# Menampilkan Visual Perbandingan Data Graduated dengan Dropout
count = analisis_students_df['Status'].value_counts()
percent = 100*analisis_students_df['Status'].value_counts(normalize=True)
category_column_df = pd.DataFrame({'Jumlah Data':count, 'Persentase':percent.round(1)})
print(category_column_df)
count.plot(kind='bar', title='Parameter Status');

"""Melalui visual diatas terlihat bahwa persebaran datanya diantara ketiga Status yaitu Mahasiswa yang lulus sebesar 49.9% sedangkan Mahasiswa yang dropout sebesar 32.1%. Sisanya merupakan mahasiswa yang masih menjalani perkuliahan.

### Bagaimana persebaran data mahasiswa yang dropout berdasarkan status pernikahan?
"""

# Menghitung jumlah dan persentase berdasarkan 'Marital_status' dan 'Status'
column_category_df = analisis_students_df.groupby(['Marital_status', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
marital_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
marital_status_category_percent_df = marital_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, marital_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Marital Status dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Marital Status
fig = pxp.histogram(analisis_students_df,
                   x='Marital_status',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Status Pernikahan',
                   labels={'Status': 'Status'})
fig.show()

"""Dari data diatas kebanyakan masih mahasiswa yang berkuliah, lulu dan dropout didominasi mahasiswa dengan status pernikahan single atau belum pernah menikah sama sekali. Sedangkan secara presentase untuk mahasiswa yng dropout di dominasi oleh mahasiswa dengan status penikahan bukan single yaitu married 47.2%, divorced 46,2% dan legally separated 66.7%. Ini menandakan bahwa mahasiswa yang memiliki peluang dropout umumnya didominasi oleh mahasiswa dengan Status bukan single.

### Bagaimana perbandingan mahasiswa dropout berdasarkan gender?
"""

# Menghitung jumlah dan persentase berdasarkan 'Gender' dan 'Status'
column_category_df = analisis_students_df.groupby(['Gender', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
gender_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
gender_status_category_percent_df = gender_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, gender_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Gender dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Gender
fig = pxp.histogram(analisis_students_df,
                   x='Gender',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Gender',
                   labels={'Status': 'Status'})
fig.show()

"""Persebaran visual diatas menunjukkan bahwa mahasiswa dengan Status dropout seacra presentase didominasi oleh laki-laki. Sebaliknya mahasiswa yang lulus secara presentase didominasi oleh mahasiswa perempuan. Kesimpulan bahwa laki-laki memiliki peluang dropout lebih besar dibandingkan perempuan.

### Bagaimana perbandingan Data Umur Mahasiswa pada saat Pendaftaran ke Jaya Jaya Institut?
"""

# Menampilkan visualisasi perbandingan Data Umur Mahasiswa pada saat Pendaftaran
fig = pxp.histogram(analisis_students_df,
                    x='Age_at_enrollment',
                   title='Persebaran Data Umur Mahasiswa pada saat Pendaftaran',
                   labels={'Age_at_enrollment': 'Umur saat Pendaftaran',
                           'count': 'Jumlah'})
fig.show()

"""Sebagian besar mahasiswa yang mendaftar ke Jaya Jaya Institut merupakan mahasiswa dengan umur muda antara 18 hingga 30 tahun.

### Apa pengaruh bidang atau jurusan mahasiswa terhadap mahasiswa dropout dan lulus?
"""

# Menghitung jumlah dan persentase berdasarkan 'Course' dan 'Status'
column_category_df = analisis_students_df.groupby(['Course', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
course_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
course_status_category_percent_df = course_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, course_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Course dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Course
fig = pxp.histogram(analisis_students_df,
                   x='Course',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Course',
                   labels={'Status': 'Status'})
fig.show()

"""Jika dilihat melalui visual diatas mahasiswa terdapat sebagian besar secara presentase adalah pada jurusan Basic Education, Biofuel Production Technologies, Informatics Engineering, Equinculture dan Management (evening attendance). Sisa jurusan tersebut lebih banyak mencetak lulusan dibandingkan dengan dropout.

### Bagaimana Persebaran Mahasiswa International pada Masing-Masing Jurusan?
"""

# Menghitung jumlah dan persentase berdasarkan 'Course' dan 'International'
column_category_df = analisis_students_df.groupby(['Course', 'International'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
course_international_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
course_international_category_percent_df = course_international_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, course_international_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Course dan International:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan International Mahasiswa berdasarkan Course
fig = pxp.histogram(analisis_students_df,
                   x='Course',
                   color='International',
                   barmode='group',
                   title='Persebaran Data International Mahasiswa berdasarkan Kategori Course',
                   labels={'International': 'International'})
fig.show()

"""Mahasiswa International paling banyak ada pada jurusan Journalism and Communication. Tidak banyak mahasiswa International yang apply ke Jaya Jaya Institut.

### Bagaimana pengaruh waktu kehadiran mahasiswa terhadap mahasiswa yang dropout?
"""

# Menghitung jumlah dan persentase berdasarkan 'Daytime_evening_attendance' dan 'Status'
column_category_df = analisis_students_df.groupby(['Daytime_evening_attendance', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
timeattend_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
timeattend_status_category_percent_df = timeattend_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, timeattend_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Waktu Kehadarian Mahasiswa dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Waktu Kehadarian Mahasiswa
fig = pxp.histogram(analisis_students_df,
                   x='Daytime_evening_attendance',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Waktu Kehadarian Mahasiswa',
                   labels={'Status': 'Status'})
fig.show()

"""Mahasiwa yang hadir di siang hari lebih banyak lulus dibandingkan dengan mahasiswa yang hadir kuliah pada malam hari. Terdapat pengaruh kehdarian belajar untuk mahasiswa berdasarkan kehadiran. Mahasiswa kehadiran siang hari lebih banyak dengan presentase 51% dengan dropout 30.8% sisanya mahasiswa yangmasih kuliah.

### Bagaimana pengaruh kewarganegaraan mahasiswa dapat berpengaruh terhadap mahasiswa dropout?
"""

# Menghitung jumlah dan persentase berdasarkan 'Nacionality' dan 'Status'
column_category_df = analisis_students_df.groupby(['Nacionality', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
nacionality_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
nacionality_status_category_percent_df = nacionality_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, nacionality_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Nacionality dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Nacionality
fig = pxp.histogram(analisis_students_df,
                   x='Nacionality',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Nacionality',
                   labels={'Status': 'Status'})
fig.show()

"""Mahasiswa kebanyakan didominasi kewarganegaraan Poturgis sisanya hanya dihitung jari kecuali kewarganegaraan Brzillian dengan total 38 mahasiswa. Secara keseluruhan mahasiswa lulus lebih banyak daripada mahasiswa dropout di masing-masing kewarganerganegaran mahasiswa.

### Apakah ada pengaruh Educational Special Needs terhadap performa mahasiswa dropout?
"""

# Menghitung jumlah dan persentase berdasarkan 'Educational_special_needs' dan 'Status'
column_category_df = analisis_students_df.groupby(['Educational_special_needs', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
eduspecial_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
eduspecial_status_category_percent_df = eduspecial_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, eduspecial_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Educational Special Needs dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Educational Special Needs
fig = pxp.histogram(analisis_students_df,
                   x='Educational_special_needs',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Educational Special Needs',
                   labels={'Status': 'Status'})
fig.show()

"""tidak terdapat penagruh yang signifikan terhadap performa mahasiswa yang lulus maupun dropout. Perbandingan secara presentase merata sehingga tidak dapat dijadikan acuan menentukan mahasiswa yang memiliki kemungkinan dropout.

### Apakah ada pengaruh Mahasiswa yang Debtor terhadap performa mahasiswa?
"""

# Menghitung jumlah dan persentase berdasarkan 'Debtor' dan 'Status'
column_category_df = analisis_students_df.groupby(['Debtor', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
debtor_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
debtor_status_category_percent_df = debtor_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, debtor_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Debtor dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Debtor
fig = pxp.histogram(analisis_students_df,
                   x='Debtor',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Debtor',
                   labels={'Status': 'Status'})
fig.show()

debtor_status_category_percent_df = analisis_students_df['Debtor'].value_counts()

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Debtor menggunakan pie chart
fig = pxp.pie(values=debtor_status_category_percent_df.values,
              names=debtor_status_category_percent_df.index,
             title='Persentase Status Mahasiswa berdasarkan Kategori Debtor',
             labels={'value': 'Jumlah',
                     'names': 'Debtor'},
             color_discrete_sequence=pxp.colors.qualitative.Pastel)
fig.show()

"""Debtor merujuk pada mahasiswa yang mempunyai pinjaman atau kredit. Dari data visual diatas secara presentase terlihat bahwa mahasiswa yang merupakan Debtor memiliki tingkat performa yang buruk alias kebanyakan di dominasi mahasiswa yang dropout. Walaupun presentase secara menyeluruh lebih sedikit dibandingkan mahasiswa non debtor namun memiliki potensi untuk melakukan dropout.

### Apakah ada pengaruh penerima beasiswa terhadap Status mahasiswa dropout atau lulus?
"""

# Menghitung jumlah dan persentase berdasarkan 'Scholarship_holder' dan 'Status'
column_category_df = analisis_students_df.groupby(['Scholarship_holder', 'Status'], observed=False).size().unstack(fill_value=0)

# Menghitung persentase
scholarship_status_category_percent_df = column_category_df.divide(column_category_df.sum(axis=1), axis=0) * 100

# Ganti NaN dengan 0 pada persentase
scholarship_status_category_percent_df = scholarship_status_category_percent_df.fillna(0)

# Menggabungkan jumlah dan persentase dalam satu DataFrame
column_category_df_combined = pd.concat(
    [column_category_df, scholarship_status_category_percent_df.round(1)],
    axis=1,
    keys=['Jumlah Data', 'Persentase']
)

# Menampilkan tabel jumlah dan persentase
print("Tabel Jumlah dan Persentase berdasarkan Penerima Beasiswa dan Status:")
print(column_category_df_combined)
print("\n")

# Menampilkan visualisasi perbandingan Status Mahasiswa berdasarkan Penerima Beasiswa
fig = pxp.histogram(analisis_students_df,
                   x='Scholarship_holder',
                   color='Status',
                   barmode='group',
                   title='Persebaran Data Status Mahasiswa berdasarkan Kategori Penerima Beasiswa',
                   labels={'Status': 'Status'})
fig.show()

"""Mahasiswa penerima beasiswa memiliki performa yang cukup baik alias memiliki kemungkinan lolos yang lebih tinggi secara presentase. Presentase mahasiswa yang lulus dengan keterangan penerima beasiswa sebesar 76%. Sebaliknya yangbukan penerima beasiswa presentase lulusnya hanya sebesar 41% tidak mencapai setengah populasi mahasiswa keseluruhan yang bukan penerima beasiswa.

### Bagaimana korelasi Status Mahasiswa dengan fitur yang lainnya?

Dengan menggunakan data dari preparation model untuk bisa melihat korelasi menggunakan matriks korelasi.
"""

numeric_columns = dataprep_model_df.select_dtypes(include=['float64', 'int64'])

correlation_matrix = numeric_columns.corr()

fig = pxp.imshow(correlation_matrix,
                labels=dict(color="Correlation"),
                x=correlation_matrix.columns,
                y=correlation_matrix.columns,
                title="Correlation Matrix")
fig.show()

"""Korelasi menunjukkan hasil yang cukup bagus namun karena parameter nya yang terlalu banyak maka fokus dari korelasi ini adalah Status terhadapparameter lain. Terdapat korelasi yang mendekati kuning dengan kata lain korelasi paling baik dengan Status yaitu Scholarship_holder, Tuition_fees_up_to_date, Curriculum_units semester 1 & semester 2, GDP dan Previous_qualification.

## Modeling

Bagian model development akan berfokus pada pembuatan model dengan beberapa algoritma machine learning sebagai solusi untuk problem statemen yang muncul di awal. Ada beberapa algoritma yang bisa digunakan pada projek ini untuk dicoba dan dipilih mana model yang terbaik. Algoritma yang akan digunakan diantaranya :

- Algoritma K-Nearest Neighbor
- Algoritma SVM
- Algoritma Decision Tree
- Algoritma Random Forest
- Algoritma Boosting Algorithm

#### Prepare Dataframe untuk Kelima Analisis Model
"""

# Siapkan Dataframe untuk Analisis Model
models = pd.DataFrame(index=['train_acc', 'test_acc'],
                      columns=['KNN', 'SVM', 'Decision Tree', 'Random Forest', 'XGBoost'])

"""### Algoritma K-Nearest Neighbor

#### Create Model
"""

# Model KNN
knn = KNeighborsClassifier(n_neighbors=10)
knn.fit(X_train, y_train)

"""#### Predict"""

# Prediksi dengan Model KNN
y_pred_knn = knn.predict(X_test)

"""#### Metric Evaluasi"""

# Menghitung Confusion Matrix dan Accuracy
conf_matrix_knn = confusion_matrix(y_test, y_pred_knn)
accuracy_knn_train = accuracy_score(y_train, knn.predict(X_train))
accuracy_knn_test = accuracy_score(y_test, y_pred_knn)

print("KNN Confusion Matrix  : ")
print(conf_matrix_knn)
print("KNN Accuracy Training : ", accuracy_knn_train)
print("KNN Accuracy Testing  : ", accuracy_knn_test)

"""#### Heatmap Confusion Matrix"""

# Membuat heatmap dari confusion matrix
knn_heatmap = sns.heatmap(conf_matrix_knn, annot=True, cmap='Greens')

# Mengatur judul dan label
knn_heatmap.set_title('Confusion Matrix Model KNN\n\n')
knn_heatmap.set_xlabel('\nPredicted Values')
knn_heatmap.set_ylabel('Actual Values ')

# Mengatur label x dan y
knn_heatmap.xaxis.set_ticklabels(['False', 'True'])
knn_heatmap.yaxis.set_ticklabels(['False', 'True'])

"""#### Save Metric Evaluasi"""

# Simpan Model untuk Analisis
models.loc['train_acc','KNN'] = accuracy_knn_train
models.loc['test_acc','KNN'] = accuracy_knn_test

"""### Algoritma SVM (Support Vector Machine)

#### Create Model
"""

# Model SVM
svm = SVC(kernel='linear')
svm.fit(X_train, y_train)

"""#### Predict"""

# Prediksi dengan Model SVM
y_pred_svm = svm.predict(X_test)

"""#### Metric Evaluasi"""

# Menghitung Confusion Matrix dan Accuracy
conf_matrix_svm = confusion_matrix(y_test, y_pred_svm)
accuracy_svm_train = accuracy_score(y_train, svm.predict(X_train))
accuracy_svm_test = accuracy_score(y_test, y_pred_svm)

print("SVM Confusion Matrix  : ")
print(conf_matrix_svm)
print("SVM Accuracy Training : ", accuracy_svm_train)
print("SVM Accuracy Testing  : ", accuracy_svm_test)

"""#### Heatmap Confusion Matrix"""

# Membuat heatmap dari confusion matrix
svm_heatmap = sns.heatmap(conf_matrix_svm, annot=True, cmap='Greens')

# Mengatur judul dan label
svm_heatmap.set_title('Confusion Matrix Model SVM\n\n')
svm_heatmap.set_xlabel('\nPredicted Values')
svm_heatmap.set_ylabel('Actual Values ')

# Mengatur label x dan y
svm_heatmap.xaxis.set_ticklabels(['False', 'True'])
svm_heatmap.yaxis.set_ticklabels(['False', 'True'])

"""#### Save Metric Evaluasi"""

# Simpan Model untuk Analisis
models.loc['train_acc','SVM'] = accuracy_svm_train
models.loc['test_acc','SVM'] = accuracy_svm_test

"""### Algoritma Decsion Tree

#### Create Model
"""

# Model Decision Tree
dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)

"""#### Predict"""

# Prediksi dengan Model Decision Tree
y_pred_dt = dt.predict(X_test)

"""#### Metric Evaluasi"""

# Menghitung Confusion Matrix dan Accuracy
conf_matrix_dt = confusion_matrix(y_test, y_pred_dt)
accuracy_dt_train = accuracy_score(y_train, dt.predict(X_train))
accuracy_dt_test = accuracy_score(y_test, y_pred_dt)

print("Decision Tree Confusion Matrix  : ")
print(conf_matrix_dt)
print("Decision Tree Accuracy Training : ", accuracy_dt_train)
print("Decision Tree Accuracy Testing  : ", accuracy_dt_test)

"""#### Heatmap Confusion Matrix"""

# Membuat heatmap dari confusion matrix
dt_heatmap = sns.heatmap(conf_matrix_dt, annot=True, cmap='Greens')

# Mengatur judul dan label
dt_heatmap.set_title('Confusion Matrix Model Decision Tree\n\n')
dt_heatmap.set_xlabel('\nPredicted Values')
dt_heatmap.set_ylabel('Actual Values ')

# Mengatur label x dan y
dt_heatmap.xaxis.set_ticklabels(['False', 'True'])
dt_heatmap.yaxis.set_ticklabels(['False', 'True'])

"""#### Save Metric Evaluasi"""

# Simpan Model untuk Analisis
models.loc['train_acc','Decision Tree'] = accuracy_dt_train
models.loc['test_acc','Decision Tree'] = accuracy_dt_test

"""### Algoritma Random Forest

#### Create Model
"""

# Model Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

"""#### Predict"""

# Prediksi dengan Model Random Forest
y_pred_rf = rf.predict(X_test)

"""#### Metric Evaluasi"""

# Menghitung Confusion Matrix dan Accuracy
conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)
accuracy_rf_train = accuracy_score(y_train, rf.predict(X_train))
accuracy_rf_test = accuracy_score(y_test, y_pred_rf)

print("Random Forest Confusion Matrix  : ")
print(conf_matrix_rf)
print("Random Forest Accuracy Training : ", accuracy_rf_train)
print("Random Forest Accuracy Testing  : ", accuracy_rf_test)

"""#### Heatmap Confusion Matrix"""

# Membuat heatmap dari confusion matrix
rf_heatmap = sns.heatmap(conf_matrix_rf, annot=True, cmap='Greens')

# Mengatur judul dan label
rf_heatmap.set_title('Confusion Matrix Model Random Forest\n\n')
rf_heatmap.set_xlabel('\nPredicted Values')
rf_heatmap.set_ylabel('Actual Values ')

# Mengatur label x dan y
rf_heatmap.xaxis.set_ticklabels(['False', 'True'])
rf_heatmap.yaxis.set_ticklabels(['False', 'True'])

"""#### Save Metric Evaluasi"""

# Simpan Model untuk Analisis
models.loc['train_acc','Random Forest'] = accuracy_rf_train
models.loc['test_acc','Random Forest'] = accuracy_rf_test

"""### Algoritma Boosting (XGBoost)

#### Create Model
"""

# Update Nama Kolom X_train
X_train_XGBoost = X_train
X_train_XGBoost.head()

# Update Nama Kolom X_test
X_test_XGBoost = X_test
X_test_XGBoost.head()

# Model XGBoost
xgb = XGBClassifier(random_state=42)
xgb.fit(X_train_XGBoost, y_train)

"""#### Predict"""

# Prediksi dengan Model XGBoost
y_pred_xgb = xgb.predict(X_test_XGBoost)

"""#### Metric Evaluasi"""

# Menghitung Confusion Matrix dan Accuracy
conf_matrix_xgb = confusion_matrix(y_test, y_pred_xgb)
accuracy_xgb_train = accuracy_score(y_train, xgb.predict(X_train))
accuracy_xgb_test = accuracy_score(y_test, y_pred_xgb)

print("XGBoost Confusion Matrix  : ")
print(conf_matrix_xgb)
print("XGBoost Accuracy Training : ", accuracy_xgb_train)
print("XGBoost Accuracy Testing  : ", accuracy_xgb_test)

"""#### Heatmap Confusion Matrix"""

# Membuat heatmap dari confusion matrix
xgb_heatmap = sns.heatmap(conf_matrix_xgb, annot=True, cmap='Greens')

# Mengatur judul dan label
xgb_heatmap.set_title('Confusion Matrix Model XGBoost\n\n')
xgb_heatmap.set_xlabel('\nPredicted Values')
xgb_heatmap.set_ylabel('Actual Values ')

# Mengatur label x dan y
xgb_heatmap.xaxis.set_ticklabels(['False', 'True'])
xgb_heatmap.yaxis.set_ticklabels(['False', 'True'])

"""#### Save Metric Evaluasi"""

# Simpan Model untuk Analisis
models.loc['train_acc','XGBoost'] = accuracy_xgb_train
models.loc['test_acc','XGBoost'] = accuracy_xgb_test

"""## Evaluation

"""

# Model Evaluasi Akurasi
print('Hasil Evaluasi Metrik Akurasi \n')
print(models)

"""### Save Model Terbaik"""

# Membuat direktori baru untuk menampung model
!mkdir /content/models

folder_path = 'models'
model_name = 'XGBoost'
model_filename_pkl = f'{folder_path}/{model_name.lower().replace(" ", "_")}_model.pkl'
with open(model_filename_pkl, 'wb') as f:
   pickle.dump(xgb, f)

"""## Sistem Prediksi"""

# Import yang dibutuhkan
import pandas as pd
import pickle
from google.colab import files

# Upload file CSV
uploaded = files.upload()

# Membaca file CSV yang diupload
data_pred = pd.read_csv(next(iter(uploaded)))
# data_pred = pd.read_csv('/content/data_predict_students.csv')

data_pred = data_pred.drop(columns=['Status'], errors='ignore')  # Drop kolom 'Attrition' jika ada

# Memastikan data yang diunggah tampak
print(data_pred.head())

# Memuat model XGBoost yang telah dilatih sebelumnya
model_pred = pickle.load(open('/content/models/xgboost_model.pkl', 'rb'))

# Lakukan prediksi
predictions = model_pred.predict(data_pred)

# Menambahkan kolom 'Predicted Status' yang berisi 'Graduated' atau 'Dropout'
data_pred['Predicted Status'] = ['Graduated' if pred == 1 else 'Dropout' for pred in predictions]

# Menampilkan hasil prediksi
print(data_pred['Predicted Status'].value_counts())
print('\n')
print(data_pred[['Predicted Status']])  # Tampilkan prediksi

# Menyimpan hasil prediksi ke dalam file CSV baru
data_pred.to_csv('/content/predicted_dropout.csv', index=False)

# # Memberikan link untuk mendownload hasil prediksi
# files.download('/content/predicted_dropout.csv')

count = data_pred['Predicted Status'].value_counts()
percent = 100*data_pred['Predicted Status'].value_counts(normalize=True)
category_column_df = pd.DataFrame({'Jumlah Data':count, 'Persentase':percent.round(1)})
print(category_column_df)
count.plot(kind='bar', title='Parameter Predicted Status');

"""## Kesimpulan

Hasil analisis yang sudah dibuat pada tahapan EDA - Based on Questions dapat diambil kesimpulan dari beberapa alasan utama yaitu Marital Status, Gender, Umur pada saat Mendaftar, Bidang Keilmun atau Jurusan, Waktu Kehadiran Kuliah, Debtor dan Scholarship Holder. Berikut penjelasan kesimpulan secara detail untuk masing-masing alasan diatas
- Berdasarkan Marital Status atau Status Pernikahannya mahasiswa yang single lebih banyak daripada yang tidak dan mahasiswa yang single memiliki presentase Graduated lebih besar 51.4%. Mahasiswa yang memiliki peluang dropout kebanyakan memiliki Status Pernikahan yaitu married 47.2%, divorced 46,2% dan legally separated 66.7%. Marital Status memberikan pengaruh pada performa mahasiswa karena dimungkinkan adanya distraksi selama studi berlangsung.
- Gender laki-laki memiliki data presentase data Status Dropout lebih besar yaitu sebesar 45.1%. Dibandingkan dengan perempuan yang justru presentasenya menghasilkan kelulusan mahasiswa sebesar 57.9%. Hal tersebut terjadi kemungkinan karena secara penelitian perempuan lebih rajin dan bisa melakukan multitastking dalam pekerjaan harian serta studinya secara bersamaan sehingga memberikan peluang kepada perempuan untuk dapat lulus studi dengan baik.
- Secara umur sebagian besar mahasiswa yang mendaftar ke Jaya Jaya Institut merupakan mahasiswa dengan umur muda antara 18 hingga 30 tahun. Usia muda memiliki produktivitas lebih baik dibandingkan usia 30 tahun ke atas memungkinkan penyelesaian studi hingga lulus. Namun tidak dipungkiri bahwa usia muda dengan faktor faktor lain seperti yang sudah disebutkan diatas seperti Marital Status, Gender, Bidang Keilmun atau Jurusan, Waktu Kehadiran Kuliah dan Debtor mampu memberikan dampak Status Dropout pada mahasiswa.
- Bidang Keilmuan atau Jurusan tertentu seperti urusan Basic Education, Biofuel Production Technologies, Informatics Engineering, Equinculture dan Management (evening attendance) mempunyai data mahasiswa dengan Status Dropout lebih banyak dibandingkan Status Graduated. Jurusan yang paling banyak diminati serta lulus adalah jurusan Nursing dan Social Service. Kebidangan yang berbasis Teknik maupun Basic Education memiliki peluang Dropout banyak. Hal ini dapat disebabkan karena bisa jadi tingginya kriteria kelulusan, ilmu advance yang tidak mudah untuk diselesaikan, minat yang kurang dan bisa jadi segi biaya studi pada jurusan tersebut yang mahal.
- Waktu kehadiran kuliah terdiri dari kelas siang dan kelas malam. Melalui hasil visual analisis didapati bahwa mahasiswa yang hadir pada kelas siang memiliki presentase untuk lulus lebih banyak dibandingkan yang dropout. Sedangkan kelas malam memiliki presentase 42.9% Dropout, 41.6% Graduated dan sisanya masih berkuliah. Hal ini bisa terjadi karena kelas siang mampu memberikan konsentrasi lebih baik dibandingkan yang kelas malam. Kelas malam umumnya biasa diisi oleh mahasiswa yang memang memiliki prioritas utama diluar seperti bekerjam ataupun berkeluarga. Sehingga bisa menyebabkan peluang dropout yang tinggi.
- Debtor atau mahasiswa yang memiliki tanggungan pinjaman/kredit memiliki presentase kelulusan yang lebih sedikit daripada yang dropout. Memiliki tingkat performa yang buruk dan fokus belajar yang tidak bagus.
- Mahasiswa Scholarship Holder/penerima beasiswa memiliki motivasi yang tinggi untuk lulus terlihat dari data secara presentase mahasiswa yang lulus dengan keterangan penerima beasiswa sebesar 76%. Sebaliknya yangbukan penerima beasiswa presentase lulusnya hanya sebesar 41% tidak mencapai setengah populasi mahasiswa keseluruhan yang bukan penerima beasiswa.

Terdapat juga beberapa variabel yang memilii hubungan cukup kuat dengan variabel Status. Melalui korelasi matrix terdapat beberapa variaebal berikut korelasi matrix Tuition_fees_up_to_date, Curriculum_units semester 1 & semester 2, GDP dan Previous_qualification.

Melalui model machine learning yang dibuat dari kelima algoritma terdapat algoritma terbaik dengan nilai akurasi tinggi yaitu XGBoost. Model machine learning dibuat untuk pada mengklasifikasikan mahasiswa yang memiliki potensi Dropout dan Graduated sehingga bisa diambil tindakan preventif awal agar Mahasiswa Dropout dapat dikurangi. Akurasi yang didapatkan cukup stabil menggunakan XGBoost dari training dan testing sehingga sistem prediksi mampu memberikan nilai yang mendekati klasifikasi yang baik.
"""

!pip freeze requirements.txt